#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<math.h>
enum variable{velocity_u1, velocity_u2, velocity_u3, level_set, pressure};
enum boundary_conditions_type{dirichlet, neumann, periodic};
enum boundary_conditions_rule{constant, function};
enum cell_centerings{cell_centered, vertex_centered};


class boundary_variable
{
public:
  variable variable_name;
  boundary_conditions_type boundary_condition_type;
  boundary_conditions_rule boundary_condition_rule;
  cell_centerings cell_centering;
  double boundary_condition_value;
  boundary_variable(variable varname, boundary_conditions_type bound_type,
				     boundary_conditions_rule bound_rule,
				     cell_centerings  cell_cent,
					double bound_value );
  boundary_variable(variable varname);
};

class boundary_face
{
public:
    boundary_variable boundary_variables[5];
    boundary_face(void);
   
};
/********************************************************************************/
/*  Function to solve the tentative velocity field u star, x3 components        */
/*                              						*/
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/*  										*/
/*  										*/
/*  										*/
/*  										*/
/********************************************************************************/
  
      void solve_momentum_predictor_u3(
      double ***level_set, 				// level-set field
      double ***momentum_source_term_u_3, 		// complete source term for the momentum equation
							// in x3 direction=(-p,3+ g_3 +F3)
      double ***u_1_velocity_old, 			// velocity field at old time level x1 direction
      double ***u_2_velocity_old, 			// velocity field at old time level x2 direction
      double ***u_3_velocity_old,			// velocity field at old time level x3 direction

      int number_primary_cells_i,			// number of primary (pressure) cells in x1 direction
      int number_primary_cells_j,			// number of primary (pressure) cells in x2 direction
      int number_primary_cells_k,			// number of primary (pressure) cells in x3 direction
      int number_matrix_connections,			// number of connections in momentum matrix				       
      double actual_time_step_navier_stokes,		// time step used for level-set advection
							// computed from all stability restrictions and 
							// possibly subscycling
      double mesh_width_x1,				// grid spacing in x1 direction (uniform)
      double mesh_width_x2,				// grid spacing in x2 direction (uniform)
      double mesh_width_x3,				// grid spacing in x3 direction (uniform)
      double rho_plus_over_rho_minus,			// ratio of the densities of the two phases
      double smoothing_distance_factor,			// the smoothing distance is smoothing_distance_factor
							// times the smallest mesh width
      double rho_minus_over_mu_minus,			// this was the 'Reynolds' number
							// in the original implementation of Sander
      double mu_plus_over_mu_minus,			// ratio of the viscosities of both phases
      boundary_face boundary_faces[6]			// array with all the information
							// for the boundary conditions 
	   )
      {


      double ***double_Matrix2(int number_primary_cells_i,		// allocate memory for a three-
				int number_primary_cells_j, 		// dimensional array of doubles
				  int number_primary_cells_k);
      void   free_double_Matrix2( 					// deallocate memory for a three
		double ***doubleMatrix2, int number_primary_cells_i,	// dimensional array of doubles
		int number_primary_cells_j);

      double ****double_Matrix3(int number_matrix_connections,		// allocate memory for a four-
				  int number_primary_cells_i,		// dimensional array of doubles
				    int number_primary_cells_j, 	
				      int number_primary_cells_k);
      void  free_double_Matrix3(double ****doubleMatrix3, 
				  int number_matrix_connections,       // deallocate memory for a four-
				    int number_primary_cells_i,        // dimensional array of doubles
				      int number_primary_cells_j);
				    

                                         
    void build_momentum_predictor_u3(				// build system of linear
      double ****momentum_matrix_u3,				// equations for momentum equation velocity
      double ***momentum_rhside_u3,				// in x3 direction
      double ***level_set, 				
      double ***momentum_source_term_u_3, 		
      double ***u_1_velocity_old, 			
      double ***u_2_velocity_old, 			
      double ***u_3_velocity_old,			
      int number_primary_cells_i,			
      int number_primary_cells_j,			
      int number_primary_cells_k,			
      double actual_time_step_navier_stokes,		
      double mesh_width_x1,				
      double mesh_width_x2,				
      double mesh_width_x3,				
      double rho_plus_over_rho_minus,			
      double smoothing_distance_factor,			
      double rho_minus_over_mu_minus,			
      double mu_plus_over_mu_minus,			
      boundary_face boundary_faces[6]			
	 );


      double ****momentum_matrix_u3;			// momentum matrix velocity x3 direction
      double ***momentum_rhside_u3;			// momentum rhside velocity x3 direction
  
      
      
      
    
    /* allocate memory for momentum matrix and rhside */

      momentum_rhside_u3=double_Matrix2(number_primary_cells_i+1, 
					  number_primary_cells_j,
					    number_primary_cells_k);
      momentum_matrix_u3=double_Matrix3(number_matrix_connections, 
					  number_primary_cells_i+1, number_primary_cells_j,
					    number_primary_cells_k); 
      
    /* build the system of linear equations */

      build_momentum_predictor_u3( momentum_matrix_u3, momentum_rhside_u3, level_set, 				
				    momentum_source_term_u_3, 		
				      u_1_velocity_old, u_2_velocity_old, u_3_velocity_old,			
					number_primary_cells_i,	number_primary_cells_j,	number_primary_cells_k,			
					  actual_time_step_navier_stokes,		
					    mesh_width_x1, mesh_width_x2, mesh_width_x3,				
					      rho_plus_over_rho_minus,			
						smoothing_distance_factor,			
						  rho_minus_over_mu_minus,			
						    mu_plus_over_mu_minus,			
						      boundary_faces);
    
    /* solve the system of linear equations */
    
    /*MISSING SOLVER PART */
    
    /* deallocate memory for momentum matrix and rhside */
    
      free_double_Matrix2(momentum_rhside_u3, number_primary_cells_i+1, number_primary_cells_j);
      free_double_Matrix3(momentum_matrix_u3, number_matrix_connections, 
					  number_primary_cells_i+1, number_primary_cells_j);
      }