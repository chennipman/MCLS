/********************************************************************************/
/********************************************************************************/
/*  Function to shift the velocity field from the new to the old time-level     */
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/* In the original implementation of Sander the source terms of the momentum    */
/* equation were computed in the function that applied the pressure correction  */
/* to the velocity field. Now it is contained in this separate function.        */
/********************************************************************************/

    void shift_velocity_field(
      double ***u_1_velocity_old, 	     	// velocity field at old time level x1 direction
      double ***u_2_velocity_old, 	     	// velocity field at old time level x2 direction
      double ***u_3_velocity_old,	     	// velocity field at old time level x3 direction
      double ***u_1_velocity_new, 	     	// velocity field at new time level x1 direction
      double ***u_2_velocity_new, 	     	// velocity field at new time level x2 direction
      double ***u_3_velocity_new,	     	// velocity field at new time level x3 direction
      double ***u_1_velocity_star,	     	// velocity field at star time level x1 direction
      double ***u_2_velocity_star,	     	// velocity field at star time level x2 direction
      double ***u_3_velocity_star,	     	// velocity field at star time level x3 direction
      int number_primary_cells_i,		// number of primary (pressure) cells in x1 direction
      int number_primary_cells_j,		// number of primary (pressure) cells in x2 direction
      int number_primary_cells_k		// number of primary (pressure) cells in x3 direction
	 )		      
      {
      void copy_vector( 			// copy a vector from original_vector to image_vector
	  int vector_length, 	
	  double *original_vector, 	
	  double *image_vector	
	);
      int vector_length_u1;			// number of unknowns in arrays u_1_velocity_new, 
						// u_1_velocity_old, u_1_velocity_star;
      int vector_length_u2;			// number of unknowns in arrays u_2_velocity_new, 
						// u_2_velocity_old, u_2_velocity_star;
      int vector_length_u3;			// number of unknowns in arrays u_3_velocity_new, 
						// u_3_velocity_old, u_3_velocity_star;
      
      /* determine the number of unknowns in the velocity arrays */
      
      vector_length_u1=(number_primary_cells_i+1)*(number_primary_cells_j+2)*(number_primary_cells_k+2);
      vector_length_u2=(number_primary_cells_i+2)*(number_primary_cells_j+1)*(number_primary_cells_k+2);
      vector_length_u3=(number_primary_cells_i+2)*(number_primary_cells_j+2)*(number_primary_cells_k+1);
 
      /* shift the velocity fields */
      /* new becomes old */
      /* star becomes new */
      
      copy_vector(vector_length_u1, **u_1_velocity_new, **u_1_velocity_old);
      copy_vector(vector_length_u1, **u_1_velocity_star, **u_1_velocity_new);

      copy_vector(vector_length_u2, **u_2_velocity_new, **u_2_velocity_old);
      copy_vector(vector_length_u2, **u_2_velocity_star, **u_2_velocity_new);

      copy_vector(vector_length_u3, **u_3_velocity_new, **u_3_velocity_old);
      copy_vector(vector_length_u3, **u_3_velocity_star, **u_3_velocity_new);
    }
	      