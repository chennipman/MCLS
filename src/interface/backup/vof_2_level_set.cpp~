#include<cstdlib>
#include<iostream>
#include<algorithm>
#include<math.h>
/********************************************************************************/
/********************************************************************************/
/*  Function to compute the level-set value from the volume of fluid value 	*/
/*  method. 									*/
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/* In Sander's thesis two functions are described:                              */
/* f : this computes the volume of field from the level-set field               */
/* g : this computes the level-set field from the volume of fluid field         */
/* The function g is not given in closed form. The formulation of algorithm     */
/* to find the value of g is now changed to Ridder's algorithm, which gives     */
/* a rate of convergence of sqrt(2), and is Jacobian free and very simple.      */
/* The purpose is to find a root of the nonlinear equation                      */
/* g(phi)=f(phi)-psi=0								*/
/* where f(phi)=vof(phi)							*/
/* Initially we need to provide to values of phi, phi_left and phi_right	*/
/* such that g(phi_left)*g(phi_right)<0	(function values have opposite sign).	*/
/* Later on, we could change it back to the original Newton algorithm or a      */
/* Brent type algorithm which gives second order convergence.                   */
/********************************************************************************/

      int vof_2_level_set( 
	      double level_set, 			// level-set field value in this cell
	      double d_level_set_d_x1, 			// first partial derivative in x1 
							// direction of level-set
	      double d_level_set_d_x2, 			// first partial derivative in x2 
							// direction of level-set 
	      double d_level_set_d_x3, 			// first partial derivative in x3 
							// direction of level-set
	      double volume_of_fluid,			// volume of fluid value in this cell
	      double lower_bound_derivatives,    	// lower bound for the first partial derivatives
							// to consider it a limiting case of vanishing
							// partial derivatives
	      double vof_2_level_set_tolerance,		// tolerance in the conversion from volume
							// of fluid value to level-set value
	      int maximum_number_iterations_ridder	// maximum number of iterations allowed in the
							// nonlinear root finding algorithm
	
      )
      {
	/* functions definitions */
	int level_set_2_vof( 
	      double level_set, 		// compute the volume of fluid field value from 
	      double d_level_set_d_x1, 		// a given level-set field value
						
	      double d_level_set_d_x2, 		
						
	      double d_level_set_d_x3, 		
						
	      double volume_of_fluid,		
	      double lower_bound_derivatives    
	);
      int ridders_method(				// 
	    double level_set_left, 			// 
	    double level_set_right, 
	    double volume_of_fluid_left, 
	    double volume_of_fluid_right,
	    double volume_of_fluid, 
	    double level_set,
	    double d_level_set_d_x1, 
	    double d_level_set_d_x2, 
	    double  d_level_set_d_x3
			);
      int ridders_method(			
	    double level_set_left, 			// nonlinear solver to find level-set 
	    double level_set_right, 			// for given volume of fluid value
	    double function_g_left, 			
	    double function_g_right,			
	    double volume_of_fluid, 			
	    double level_set,				
	    double d_level_set_d_x1, 			
	    double d_level_set_d_x2, 			
	    double d_level_set_d_x3, 			
	    double vof_2_level_set_tolerance,		
	    int maximum_number_iterations_ridder,	
	    int lower_bound_derivatives			
			);
      double level_set_left;			// left hand level_set value for nonlinear root finding
      double level_set_right;			// right hand level_set value for nonlinear root finding
      double volume_of_fluid_left;		// left hand volume of fluid value for nonlinear root finding
      double volume_of_fluid_right;		// right hand volume of fluid value for nonlinear root finding
      double function_g_left;
      double function_g_right;
 
      /* find two values of the linearized level-set field, such that the function */
      /* g(phi)=f(phi)-psi has opposite sign					   */
      
      level_set_left= -0.5*(d_level_set_d_x1+d_level_set_d_x2+d_level_set_d_x3);
      level_set_right=-1.0*level_set_left;
      
      if(!level_set_2_vof(level_set_left, 
			    d_level_set_d_x1, d_level_set_d_x2, d_level_set_d_x3, 
			      volume_of_fluid_left, lower_bound_derivatives))
      {
	std::cout<< "error in computation of volume of fluid in vof_2_level_set \n";
	std::cout<< "Left state, aborting \n";
	exit(1);
      }
      
      if(!level_set_2_vof(level_set_right, 
			    d_level_set_d_x1, d_level_set_d_x2, d_level_set_d_x3, 
			      volume_of_fluid_left, lower_bound_derivatives))
      {
	std::cout<< "error in computation of volume of fluid in vof_2_level_set \n";
	std::cout<< "Right state, aborting \n";
	exit(1);
      }
      
      function_g_left  = volume_of_fluid_left-volume_of_fluid;
      function_g_right = volume_of_fluid_right-volume_of_fluid;
      
      if(function_g_left*function_g_right>0)
      {
	std::cout<< "error in providing two volume of fluid values of opposite sign \n";
	std::cout<< "to start nonlinear root finding, aborting \n";
	exit(1);
      }
      
      /* use Ridders method to find the root of the equation g(phi) */

      if(!ridders_method(level_set_left, level_set_right, 
		      function_g_left, function_g_right,
			volume_of_fluid, level_set,
			  d_level_set_d_x1, d_level_set_d_x2, d_level_set_d_x3, 
			    vof_2_level_set_tolerance,
			      maximum_number_iterations_ridder,	
				lower_bound_derivatives	))
      {
	std::cout<< "Nonlinear root finding algorithm failed in vof_2_level_set \n";
	std::cout<< "Aborting \n";
	exit(1);
	
      }

}     