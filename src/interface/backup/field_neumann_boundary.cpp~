
/********************************************************************************/
/********************************************************************************/
/*  Function to apply neumann boundary condition to a cell centered field       */
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/* This function will extrapolate centered field values from the real cells     */
/* to the virtual cells. The field can be any quantity that is defined in the   */
/* centers of the primary cells 						*/
/********************************************************************************/
//
void  field_neumann_boundary(
      double ***field, 			// cell centered field
      int number_primary_cells_i,	// number of primary (pressure) cells in x1 direction
      int number_primary_cells_j,	// number of primary (pressure) cells in x2 direction
      int number_primary_cells_k	// number of primary (pressure) cells in x3 direction
      
)

{

  int i_index, j_index, k_index;  // local variables for loop indexing

/* Apply a homogeneous Neumann boundary condition to the field */
/* This means the lower index virtual cell will get the value of the first real cell */
/* and the higher index virtual cell has the value of the last real cell */
/* The indication of the face refers to a standard right handed frame of reference */
  
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {

	    /* slice with i_index = 0 'back face' */  
     
	      field[0][j_index][k_index]  =  
				field[1][j_index][k_index];

  
	  }  
  
      }  
     
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {

	    /* slice with i_index = number_primary_cells_i+1 'front face' */  

	      field[number_primary_cells_i+1][j_index][k_index]  =  
				field[number_primary_cells_i][j_index][k_index];

  
	  }  
  
      }  
     
 
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
	    /* slice with j_index = 0 'left face' */  
    
	      field[i_index][0][k_index]  =  
				field[i_index][1][k_index];

  
	  }  
   
  
      }  
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
	    /* slice with j_index = 0 'left face' */  
    
	      field[i_index][number_primary_cells_j+1][k_index]  =  
				field[i_index][number_primary_cells_j][k_index];

  
	  }  
   
  
      }  
     
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(j_index=1;j_index<number_primary_cells_j;j_index++)
	  {
	    /* slice with k_index = 0 'bottom face' */  
	      field[i_index][j_index][0] =  
		    field[i_index][j_index][1];

 	  }  
   
      }  

      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(j_index=1;j_index<number_primary_cells_j;j_index++)
	  {
	    /* slice with k_index = number_primary_cells_k+1 'top face' */
	      field[i_index][j_index][0] =  
		    field[i_index][j_index][1];

 	  }  
   
      }  
     
}