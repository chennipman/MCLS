
/********************************************************************************/
/********************************************************************************/
/*  Function to compute the advection of the level_set function          	*/
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/* The level-set field is advected using a first-order upwind scheme in space   */
/* and an explicit Euler time discretisation 					*/
/* For each cell face the computed flux is used for both neigbouring cells 	*/
/* Because the level_set field and the velocity field are staggered in time     */
/* we can use the velocity field at the new time level to define the advection	*/
/********************************************************************************/
//
void advect_level_set(
      double ***level_set_old, 		// level set field at old time level
      double ***level_set_new, 		// level set field at new time level
      double ***u_1_velocity_new, 	// velocity field at new time level x1 direction
      double ***u_2_velocity_new, 	// velocity field at new time level x2 direction
      double ***u_3_velocity_new,	// velocity field at new time level x3 direction
      int number_primary_cells_i,	// number of primary (pressure) cells in x1 direction
      int number_primary_cells_j,	// number of primary (pressure) cells in x2 direction
      int number_primary_cells_k,	// number of primary (pressure) cells in x3 direction
      double actual_time_step_level_set,// time step used for level-set advection
					// computed from all stability restrictions and 
					// possibly subscycling
      double mesh_width_x1,		// grid spacing in x1 direction (uniform)
      double mesh_width_x2,		// grid spacing in x2 direction (uniform)
      double mesh_width_x3		// grid spacing in x3 direction (uniform)
      
)



{

  int i_index, j_index, k_index;  // local variables for loop indexing
  double cell_face_velocity; 	// velocity at the cell face (no interpolation required)
				// because of staggered mesh
  double flux_level_set; 	// advective flux
  double compute_flux( 		// function to interpolate the level-set to the cell faces
				// to evaluate the flux
	  double cell_face_velocity, double left_phi, double right_phi);
  
  
/* handle all the convective transport for internal faces in x1 direction */
/* Note: first real cell has index 1, last real cell index number_primary_cells_i */

  for(i_index=1;i_index<number_primary_cells_i;i_index++)
  {
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
      
	      cell_face_velocity = u_1_velocity_new[i_index][j_index][k_index];
	      flux_level_set = compute_flux(cell_face_velocity,level_set_old[i_index][j_index][k_index],
					    level_set_old[i_index+1][j_index][k_index]);
	      flux_level_set *= actual_time_step_level_set*mesh_width_x1;
	      level_set_new[i_index  ][j_index][k_index]  -=  flux_level_set; 
	      level_set_new[i_index+1][j_index][k_index]  +=  flux_level_set;
  
	  }  
  
      }  
     
  } 
  
/* handle all the convective transport for internal faces in x2 direction */
/* Note: first real cell has index 1, last real cell index number_primary_cells_j */

  for(i_index=1;i_index<number_primary_cells_i;i_index++)
  {
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
      
 	      cell_face_velocity = u_2_velocity_new[i_index][j_index][k_index];
	      flux_level_set = compute_flux(cell_face_velocity,level_set_old[i_index][j_index][k_index],
					    level_set_old[i_index][j_index+1][k_index]);
	      flux_level_set *= actual_time_step_level_set*mesh_width_x2;
	      level_set_new[i_index][j_index  ][k_index]  -=  flux_level_set; 
	      level_set_new[i_index][j_index+1][k_index]  +=  flux_level_set;
 
	  }  
   
      }  
    
  }  

/* handle all the convective transport for internal faces in x2 direction */
/* Note: first real cell has index 1, last real cell index number_primary_cells_k */

  for(i_index=1;i_index<number_primary_cells_i;i_index++)
  {
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
      
  	      cell_face_velocity = u_3_velocity_new[i_index][j_index][k_index];
	      flux_level_set = compute_flux(cell_face_velocity,level_set_old[i_index][j_index][k_index],
					    level_set_old[i_index][j_index+1][k_index]);
	      flux_level_set *= actual_time_step_level_set*mesh_width_x3;
	      level_set_new[i_index][j_index][k_index  ]  -=  flux_level_set; 
	      level_set_new[i_index][j_index][k_index+1]  +=  flux_level_set;

  
	  }  
   
  
  
      }  
     
  
  
  }  
  
/* Apply a homogeneous Neumann boundary condition to the level-set field */
/* This means the lower index virtual cell will get the value of the first real cell */
/* and the higher index virtual cell has the value of the last real cell */
/* The indication of the face refers to a standard right handed frame of reference */
  
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {

	    /* slice with i_index = 0 'back face' */  
     
	      level_set_new[0][j_index][k_index]  =  
				level_set_new[1][j_index][k_index]

  
	  }  
  
      }  
     
      for(j_index=1;j_index<number_primary_cells_j;j_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {

	    /* slice with i_index = number_primary_cells_i+1 'front face' */  

	      level_set_new[number_primary_cells_i+1][j_index][k_index]  =  
				level_set_new[number_primary_cells_i][j_index][k_index]

  
	  }  
  
      }  
     
 
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
	    /* slice with j_index = 0 'left face' */  
    
	      level_set_new[i_index][0][k_index]  =  
				level_set_new[i_index][1][k_index];

  
	  }  
   
  
      }  
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(k_index=1;k_index<number_primary_cells_k;k_index++)
	  {
	    /* slice with j_index = 0 'left face' */  
    
	      level_set_new[i_index][number_primary_cells_j+1][k_index]  =  
				level_set_new[i_index][number_primary_cells_j][k_index];

  
	  }  
   
  
      }  
     
      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(j_index=1;j_index<number_primary_cells_j;j_index++)
	  {
	    /* slice with k_index = 0 'bottom face' */  
	      level_set_new[i_index][j_index][0] =  
		    level_set_new[i_index][j_index][1];

 	  }  
   
      }  

      for(i_index=1;i_index<number_primary_cells_i;i_index++)
      {
	  for(j_index=1;j_index<number_primary_cells_j;j_index++)
	  {
	    /* slice with k_index = number_primary_cells_k+1 'top face' */
	      level_set_new[i_index][j_index][0] =  
		    level_set_new[i_index][j_index][1];

 	  }  
   
      }  
     
  
  
  }  

    
}



