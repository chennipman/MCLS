      
/********************************************************************************/
/*  Function to compute the surface tension body force, in the CSF approach     */
/*            									*/
/*  										*/
/*  Programmer	: Duncan van der Heul       					*/
/*  Date	: 10-03-2013       						*/
/*  Update	:        							*/
/********************************************************************************/
/* Notes									*/
/* The computation of the capillary time-step restriction was part of this      */
/* function in Sanders implementation. Now it is moved to a separate function   */
/* that evaluates all different restrictions.                                   */
/*                                                                              */
/*                                                                              */
/*                                                                              */
/*                                                                              */
/********************************************************************************/

void compute_surface_tension_body_force(
 	    double ***level_set, 				// level set field
	    double ***surface_tension_body_force_x1,		// x1 component of the body force due to
								// CSF formulation of surface tension model
	    double ***surface_tension_body_force_x2,		// x2 component of the body force due to
								// CSF formulation of surface tension model
	    double ***surface_tension_body_force_x3,		// x3 component of the body force due to
								// CSF formulation of surface tension model
	    int number_primary_cells_i,				// number of primary (pressure) cells in x1 direction
	    int number_primary_cells_j,				// number of primary (pressure) cells in x2 direction
	    int number_primary_cells_k,				// number of primary (pressure) cells in x3 direction
	    double mesh_width_x1,				// grid spacing in x1 direction (uniform)
	    double mesh_width_x2,				// grid spacing in x2 direction (uniform)
	    double mesh_width_x3,				// grid spacing in x3 direction (uniform)
	    double rho_plus_over_rho_minus, 			// rho_plus / rho_minus indicated 
	    double sigma_over_rho_minus,			// sigma / rho_minus (scaled sigma)
	    double maximum_weighted_curvature,			// maximum 'active' value of the curvature 
								// used to evaluate the capillary time step
								// restriction 
	    int apply_curvature_smoothing,			// =1, apply curvature smoothing
								// =0, use unsmoothed curvature
	    int number_curvature_smoothing_steps,		// number of iterations applied in the
								// curvature smoothing algorithm
	    int apply_curvature_smoothing_filter,
	    double smoothing_distance_factor
	      )								
{

/*--------------------------------------------------------------------------------------------------*/      
/* function definitions */
/*--------------------------------------------------------------------------------------------------*/      

      double ***double_Matrix2(int number_primary_cells_i,		// allocate memory for a three-
				int number_primary_cells_j, 		// dimensional array of doubles
				  int number_primary_cells_k);
      void free_double_Matrix2( 					// deallocate memory for a three
		double ***doubleMatrix2, int number_primary_cells_i,	// dimensional array of doubles
		int number_primary_cells_j);
      void compute_curvature(						// compute the curvature
	 double ***level_set, 				
	 double ***curvature,				
	 int number_primary_cells_i,			
	 int number_primary_cells_j,			
	 int number_primary_cells_k,			
         double mesh_width_x1,				
         double mesh_width_x2,				
         double mesh_width_x3				
	);

        void smooth_curvature(                              		// smooth the curvature
  	    double ***level_set, 			
	    double ***curvature_new,			
	    int number_primary_cells_i,			
	    int number_primary_cells_j,			
	    int number_primary_cells_k,			
	    double mesh_width_x1,			
	    double mesh_width_x2,			
	    double mesh_width_x3,			
	    int apply_curvature_smoothing_filter,
	    int number_curvature_smoothing_steps
       );
      void compute_body_force_x1( 					// compute body force in x1
      	   double ***curvature,			     			// direction
      	   double ***level_set, 			
      	   double ***surface_tension_body_force,	
      	   double mesh_width_x1,			
      	   double mesh_width_x2,			
      	   double mesh_width_x3,			
      	   int number_primary_cells_i,		
      	   int number_primary_cells_j,		
      	   int number_primary_cells_k,		
      	   double rho_plus_over_rho_minus, 		
      	   double sigma_over_rho_minus,		
	   double maximum_body_force,		
	   double total_body_force,			
      	   double maximum_weighted_curvature,
	   double smoothing_distance_factor
       );						
      void compute_body_force_x2(                                 	// compute body force in x1
      	   double ***curvature,			             		// direction
      	   double ***level_set, 			
      	   double ***surface_tension_body_force,	
      	   double mesh_width_x1,			
      	   double mesh_width_x2,			
      	   double mesh_width_x3,			
      	   int number_primary_cells_i,		
      	   int number_primary_cells_j,		
      	   int number_primary_cells_k,		
      	   double rho_plus_over_rho_minus, 		
      	   double sigma_over_rho_minus,		
	   double maximum_body_force,		
	   double total_body_force,			
      	   double maximum_weighted_curvature,
	   double smoothing_distance_factor		
       );						
      void compute_body_force_x3(                                       // compute body force in x1
	   double ***curvature,			 			// direction
	   double ***level_set, 			    	
      	   double ***surface_tension_body_force_x3,	
	   double mesh_width_x1,			    	
           double mesh_width_x2,			    	
           double mesh_width_x3,			    	
           int number_primary_cells_i,		    	
           int number_primary_cells_j,		    	
           int number_primary_cells_k,		    	
      	   double rho_plus_over_rho_minus, 		
           double sigma_over_rho_minus,		    	
  	   double maximum_body_force,		    	
           double total_body_force,			
      	   double maximum_weighted_curvature,
	   double smoothing_distance_factor		
       );						
/*--------------------------------------------------------------------------------------------------*/      


      double ***curvature;						// interface curvature 
      double ***smoothed_curvature;					// interface curvature after smoothing
      double maximum_body_force_x1;					// maximum body force, x1 component
      double maximum_body_force_x2;					// maximum body force, x2 component
      double maximum_body_force_x3;					// maximum body force, x3 component
      
      double total_body_force_x1;					// total body force, x1 component
      double total_body_force_x2;					// total body force, x2 component
      double total_body_force_x3;					// total body force, x3 component
      
	  /* allocate storage for the interface curvature, both the directly computed and smoothed one */
	  
	curvature=
		  double_Matrix2(number_primary_cells_i+2,number_primary_cells_j+2, number_primary_cells_k+2);
	smoothed_curvature=  
		  double_Matrix2(number_primary_cells_i+2,number_primary_cells_j+2, number_primary_cells_k+2);

		  
  
	/* compute the curvature */
	
	compute_curvature( level_set, curvature, 
			    number_primary_cells_i, number_primary_cells_j, number_primary_cells_k,			
			      mesh_width_x1, mesh_width_x2, mesh_width_x3);
	
		
	/* smooth the curvature if necessary */
	
	if(apply_curvature_smoothing)
	{
	    smooth_curvature(level_set, curvature, 
			      number_primary_cells_i, number_primary_cells_j, number_primary_cells_k,			
				mesh_width_x1, mesh_width_x2, mesh_width_x3,
				  apply_curvature_smoothing_filter, number_curvature_smoothing_steps);

	}


	maximum_weighted_curvature=0;
	
	/* compute the body force in x1 direction */
	
	compute_body_force_x1(curvature, level_set, surface_tension_body_force_x1, 
			      mesh_width_x1, mesh_width_x2, mesh_width_x3,
			      number_primary_cells_i, number_primary_cells_j, number_primary_cells_k,	
				rho_plus_over_rho_minus, sigma_over_rho_minus,	
				  maximum_body_force_x1, total_body_force_x1, maximum_weighted_curvature,
				  smoothing_distance_factor);						

	/* compute the body force in x2 direction */
	
	compute_body_force_x2(curvature, level_set, surface_tension_body_force_x2, 
			      mesh_width_x1, mesh_width_x2, mesh_width_x3,
			      number_primary_cells_i, number_primary_cells_j, number_primary_cells_k,	
				rho_plus_over_rho_minus, sigma_over_rho_minus,	
				  maximum_body_force_x2, total_body_force_x2, maximum_weighted_curvature,
				  smoothing_distance_factor);						 

   
	/* compute the body force in x3 direction */
	
	compute_body_force_x3(curvature, level_set, surface_tension_body_force_x3, 
			      mesh_width_x1, mesh_width_x2, mesh_width_x3,
			      number_primary_cells_i, number_primary_cells_j, number_primary_cells_k,	
				rho_plus_over_rho_minus, sigma_over_rho_minus,	
				  maximum_body_force_x3, total_body_force_x3, maximum_weighted_curvatur,
				  smoothing_distance_factor);						

 
	  /* deallocate storage for the interface curvature, both the directly computed and smoothed one */
	  
	free_double_Matrix2(curvature, number_primary_cells_i+2,number_primary_cells_j+2);
	free_double_Matrix2(smoothed_curvature, number_primary_cells_i+2,number_primary_cells_j+2);
        
}
